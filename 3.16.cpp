#include <iostream>   // Для ввода-вывода
#include <fstream>    // Для работы с файлами
#include <vector>     // Для использования векторов
#include <string>     // Для работы со строками

// Структура, описывающая игрушку
struct Toy {
    char n[50];  // Название игрушки (массив символов)
    float p;     // Цена игрушки
    int a_f;     // Минимальный возраст (от)
    int a_t;     // Максимальный возраст (до)

    // Метод для вывода информации об игрушке
    void print() const {
        std::cout << "Название: " << n << ", Цена: " << p << " руб., Возраст: " << a_f << "-" << a_t << std::endl;
    }
};

// Функция для заполнения файла игрушками
void fillToyFile(const std::string& f) {
    // Создаем вектор с игрушками
    std::vector<Toy> t = {
        {"Кубики", 150.5, 2, 5},
        {"Кукла", 300.0, 3, 5},
        {"Машинка", 500.0, 2, 5},
        {"Конструктор", 200.0, 2, 5},
        {"Медвежонок", 350.0, 4, 8}
    };

    // Открываем файл для записи в бинарном режиме
    std::ofstream ofs(f, std::ios::binary);
    if (!ofs) {
        std::cerr << "Ошибка открытия файла для записи." << std::endl; // Проверка успешности открытия файла
        return;
    }

    // Записываем каждую игрушку в файл
    for (const auto& toy : t) {
        ofs.write(reinterpret_cast<const char*>(&toy), sizeof(Toy)); // Запись структуры в файл
    }

    ofs.close(); // Закрываем файл
}

// Функция для поиска определенных игрушек и вычисления средней цены
void findBlocksAndCalculateAveragePrice(const std::string& f) {
    // Открываем файл для чтения в бинарном режиме
    std::ifstream ifs(f, std::ios::binary);
    if (!ifs) {
        std::cerr << "Ошибка открытия файла для чтения." << std::endl; // Проверка успешности открытия файла
        return;
    }

    Toy t;       // Переменная для хранения текущей игрушки
    float s = 0; // Сумма цен найденных игрушек
    int c = 0;   // Счетчик найденных игрушек

    // Читаем игрушки из файла до конца
    while (ifs.read(reinterpret_cast<char*>(&t), sizeof(Toy))) {
        // Проверяем, является ли игрушка кубиками или конструктором
        if (std::string(t.n) == "Кубики" || std::string(t.n) == "Конструктор") {
            t.print(); // Выводим информацию об игрушке
            s += t.p;  // Добавляем цену к общей сумме
            c++;       // Увеличиваем счетчик найденных игрушек
        }
    }

    // Если были найдены подходящие игрушки, вычисляем и выводим среднюю цену
    if (c > 0) {
        std::cout << "Средняя цена кубиков: " << s / c << " руб." << std::endl;
    } else {
        std::cout << "Кубики не найдены." << std::endl; // Если не найдено ни одной игрушки
    }

    ifs.close(); // Закрываем файл
}

int main() {
    std::string f = "toys.dat"; // Имя файла для хранения данных об игрушках

    fillToyFile(f); // Заполняем файл данными об игрушках
    findBlocksAndCalculateAveragePrice(f); // Ищем кубики и считаем среднюю цену

    return 0; // Завершение программы
}
