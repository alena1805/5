#include <iostream>   // Для ввода-вывода
#include <fstream>    // Для работы с файлами
#include <vector>     // Для использования векторов
#include <ctime>      // Для работы с временем (для генерации случайных чисел)
#include <cstdlib>    // Для работы с функциями генерации случайных чисел

// Функция для генерации случайных данных и записи их в бинарный файл
void genData(const std::string& filename, size_t n) {
    std::ofstream file(filename, std::ios::binary); // Открываем файл для записи в бинарном режиме
    if (!file) { // Проверка на успешное открытие файла
        std::cerr << "Ошибка при открытии файла для записи." << std::endl; // Сообщение об ошибке
        return; // Выход из функции, если файл не открыт
    }

    std::srand(static_cast<unsigned int>(std::time(nullptr))); // Инициализация генератора случайных чисел

    for (size_t i = 0; i < n; ++i) { // Генерация n случайных чисел
        int num = std::rand() % 1000;  // Случайное число от 0 до 999
        file.write(reinterpret_cast<char*>(&num), sizeof(num)); // Запись числа в файл
    }

    file.close(); // Закрытие файла
}

// Функция для чтения данных из бинарного файла и загрузки их в матрицу
std::vector<std::vector<int>> loadMatrix(const std::string& filename, int n) {
    std::ifstream file(filename, std::ios::binary); // Открываем файл для чтения в бинарном режиме
    if (!file) { // Проверка на успешное открытие файла
        std::cerr << "Ошибка при открытии файла для чтения." << std::endl; // Сообщение об ошибке
        return {}; // Возвращаем пустой вектор в случае ошибки
    }

    std::vector<std::vector<int>> m(n, std::vector<int>(n, 0)); // Создаем матрицу размером n x n, заполненную нулями
    int idx = 0; // Индекс для отслеживания количества прочитанных элементов
    int num; // Переменная для хранения прочитанного числа

    while (file.read(reinterpret_cast<char*>(&num), sizeof(num)) && idx < n * n) { // Читаем данные из файла
        int r = idx / n; // Вычисляем индекс строки
        int c = idx % n; // Вычисляем индекс столбца
        m[r][c] = num; // Записываем число в матрицу
        ++idx; // Увеличиваем индекс
    }

    // Если данных не хватает, заполняем оставшиеся нулями
    while (idx < n * n) {
        int r = idx / n; // Вычисляем индекс строки
        int c = idx % n; // Вычисляем индекс столбца
        m[r][c] = 0; // Заполняем нулями оставшиеся элементы матрицы
        ++idx; // Увеличиваем индекс
    }

    file.close(); // Закрываем файл
    return m; // Возвращаем загруженную матрицу
}

// Функция для замены элементов матрицы, начинающихся с указанной цифры d
void replace(std::vector<std::vector<int>>& m, int d) {
    for (auto& row : m) { // Проходим по каждой строке матрицы
        for (auto& elem : row) { // Проходим по каждому элементу строки
            int first_digit = std::abs(elem); // Получаем абсолютное значение элемента
            while (first_digit >= 10) { // Определяем первую цифру числа
                first_digit /= 10; // Уменьшаем число до первой цифры
            }

            if (first_digit == d) { // Если первая цифра равна d, заменяем элемент на d
                elem = d;
            }
        }
    }
}

// Функция для вывода матрицы на экран
void printMatrix(const std::vector<std::vector<int>>& m) {
    for (const auto& row : m) { // Проходим по каждой строке матрицы
        for (const auto& elem : row) { // Проходим по каждому элементу строки
            std::cout << elem << " "; // Выводим элемент на экран
        }
        std::cout << std::endl; // Переход на новую строку после вывода всех элементов строки
    }
}

// Функция для вывода содержимого бинарного файла на экран
void printFile(const std::string& filename) {
    std::ifstream file(filename, std::ios::binary); // Открываем файл для чтения в бинарном режиме
    if (!file) { // Проверка на успешное открытие файла
        std::cerr << "Ошибка при открытии файла для чтения." << std::endl; // Сообщение об ошибке
        return; // Выход из функции, если файл не открыт
    }

    int num; // Переменная для хранения прочитанного числа
    while (file.read(reinterpret_cast<char*>(&num), sizeof(num))) { // Читаем числа из файла до конца
        std::cout << num << " "; // Выводим число на экран
    }
    std::cout << std::endl; // Переход на новую строку после вывода всех чисел

    file.close(); // Закрываем файл
}

int main() {
    const std::string filename = "data.bin"; // Имя файла для хранения данных
    const int n = 4; // Размер матрицы (n x n)
    const int num_elements = n * n; // Общее количество элементов в матрице

    // Генерация случайных данных и запись их в файл (записываем меньше элементов для демонстрации)
    genData(filename, num_elements - 2);

    // Вывод содержимого файла до обработки данных
    std::cout << "До обработки:" << std::endl;
    printFile(filename);

    // Загрузка данных из файла в матрицу
    auto m = loadMatrix(filename, n);

    // Замена элементов, начинающихся с цифры 5
    replace(m, 5);

    // Вывод измененной матрицы на экран
    std::cout << "Измененная матрица:" << std::endl;
    printMatrix(m);

    // Вывод содержимого файла после обработки данных (файл не изменился)
    std::cout << "После обработки:" << std::endl;
    printFile(filename);

    return 0; // Завершение программы с кодом 0 (успешно)
}
